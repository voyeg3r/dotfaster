# #!/bin/zsh
priority 1

snippet zsh "zsh header" bA
#!/usr/bin/env zsh
#     Created: `date +%c`
# Last Change:  2018 mai 29 10:43
#      Author:  ${1:`!v g:snips_author`}
#     Twitter:  ${2:`!v g:snips_twitter`}
#     Licence:  GPL (see http://www.gnu.org/licenses/gpl.txt)
${0:# press Ctrl-j to jump placeholders}
endsnippet

snippet alias
alias ${1:name}='${2:action}'
endsnippet

snippet lower "lower case var"
${${1:var}:l} ${0:#ctrl-j to get here}
endsnippet

snippet galias
alias -g ${1:name}='${2:action}'
endsnippet

snippet usage
usage()
{
    echo "Usage: $(basename $${1:0}) ${2:argument}"
    echo "${3:explanation}"
}
endsnippet

snippet lock
LOCK_FILE=/tmp/.lock
(set -C; :  > $LOCK_FILE) 2> /dev/null
if [  $? != "0" ];  then
    echo "Lock File exists - exiting"
    sleep 1
    exit 1
fi
${0:# press c-j}
endsnippet

snippet ifile "if file exists" w
if [ ! -e ${1:filename}  ]; then
    echo "  file $1 do not exists"
fi
${0}
endsnippet

snippet 'exe(cutable)?' "test if a file is executable" !r
if [ ! -x ${1:filename} ]; then
    echo " file $1 is not executable!"
fi
endsnippet

snippet 'fun(ction)?' "function" !r
${1:function_name}(${2:${@}}) {
    ${3:#function_body}
}
${0:# jump out ctrl-j}
endsnippet

snippet '\b(if)?root' "if user is root" !r
if [ "$(id -u)" != "0" ]; then
    echo "  Need be root"
    sleep 2
    exit  1
fi
${0:# Press ctrl-j to jump here}
endsnippet

snippet has "Description" w
NEEDED_COMMANDS=(${1:comandos})
missing_counter=0
for cmd in $NEEDED_COMMANDS; do
    if ! (( $+commands[$cmd] )); then
        echo "Command $cmd is missing!" >&2
        ((missing_counter++))
    fi
done
if ((missing_counter > 0)); then
    echo "At least one command is missing!" >&2
    exit 1
fi
endsnippet

snippet if "if" w
if ${1:condition}; then
	${2:# statements}
fi
endsnippet

snippet ife "ife"
if ${1:condition}; then
	${2:# statements}
else
	${3:# statements}
fi
endsnippet

snippet elif "elif"
elif ${1:condition} ; then
	${2:# statements}
endsnippet

snippet for "for" b
for (( ${1:i} = 0; $1 < ${2:count}; $1++ )); do
	${3:# statements}
done
endsnippet

# in this snippet you can perform an action on each file
# like this: --> for file in *; do mv $file ${file:l}; done
snippet fori "Description" Options
for file in *; do ${1:cmd} ${2:options}; done
endsnippet

snippet fore "fore"
for ${1:item} in ${2:list}; do
	${3:# statements}
done
endsnippet

snippet 'wh(ile)?' "wh" !r
while ${1:condition}; do
	${2:# statements}
done
endsnippet

snippet until "until"
until ${1:condition}; do
	${2:# statements}
done
endsnippet

snippet repeat "repeat"
repeat ${1:integer}; do
	${2:# statements}
done
endsnippet

snippet case "case"
case ${1:word} in
	${2:pattern})
		${3};;
esac
endsnippet

snippet select "select"
select ${1:answer} in ${2:choices}; do
	${3:# statements}
done
endsnippet

snippet always "always"
{ ${1:try} } always { ${2:always} }
endsnippet

snippet array "esay array creation" w
local array=( ${1:@} )
${0: ctrl-j}
endsnippet

snippet larray "last array item" w
local ${1:last}=${${2:array}[-1]}
${0: ctrl-j}
endsnippet

snippet arrayargs "return array args"
${1:args}=${${2:array}[1,-2]}
${0: ctrl-j}
endsnippet

snippet which "test if program exists"
which ${1:program name}
${0: ctrl-j}
endsnippet

snippet 'licence' "gpl3 licence" r
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

${0: press ctrl-j}
endsnippet

snippet todo "what we need to do"
# TODO ${1:Things to be done} {`date +%Y-%m-%d\ %H:%M` `!v g:snips_author`}
endsnippet

snippet gt "compare two variables" w
if [[ "${1:foo}" -gt "${2:bar}" ]]; then
   ${3:statements}
fi
${0:# jump outside - ctrl-j}
endsnippet

snippet newer "says if file is newer than" w
if [[ "${1:foo}" -nt "${2:bar}" ]]; then
        printf 'file %s is newer than %s\n' "$$1" "$$2"
fi
${0:# jump outside ctrl-j}
endsnippet

snippet = "compare strings" b
if [[ "${1:foo}" == "${2:bar}" ]]; then
    ${3:echo "$1" is equal to "$2"}
fi
${0:# ctrl-j}
endsnippet

# this snippet allows you to do things like
# ls -l */**/*.txt
snippet '\bre(cursive)?' "perform recursive action" r
${1:cmd} ${2:options} */**/*.${3:file_extension}
${0}
endsnippet

snippet here "here documment" w
${1:cat} <<-EOF
${2:your_text}
EOF
${0}
endsnippet

snippet 'yes(no)?' "Asks for confirmation" r
while true; do
  read Answer\?'Do you like coffee? [Y/n]  '
  case $Answer in
    '' | [Yy]* )
      ${1:echo Yes!}
      break;
      ;;
    [Nn]* )
      ${2:echo No!}
      break;
      ;;
    * )
      echo Please answer YES or NO.
      ;;
  esac
done
$0
endsnippet

snippet ask "ask user interaction" w
read "response?Are you sure? [Y/n] "
response=${response:l} #tolower
if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
    echo "You have chosen yes"
fi
endsnippet


# vim: set ft=zsh ts=8 sw=4 tw=0 noet :
