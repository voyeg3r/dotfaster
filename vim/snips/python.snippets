snippet #!
#!/usr/bin/env python
# -*- coding: utf-8 -*-
endsnippet

snippet py "python header" w
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4
#        File:  <+Filename Here+>
#      Author:  `!v g:snips_author `
#     Purpose:  <+this script aims...+>
# Last Change:  `!v strftime("%c")`
#     Created:  `!v strftime("%c")`
#       email:  `!v g:snips_email`
#      Github:  `!v g:snips_github`
#     twitter:  `!v g:snips_twitter`

${0}
endsnippet

snippet imp "module import" w
import ${0:module}
endsnippet

snippet uni
def __unicode__(self):
    ${0:representation}
endsnippet

snippet cls "clean scren" w
# import os
def cls():
    if os.name == 'posix':
        os.system('clear')
    else:
        os.system('cls')
endsnippet

snippet from "import from a given module" w
from ${1:package} import ${0:module}
endsnippet

# Module Docstring
snippet docs
"""
File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
Author: `g:snips_author`
Email: `g:snips_email`
Github: `g:snips_github`
Description: ${0}
"""
endsnippet

snippet wh
while ${1:condition}:
    ${0}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh
while True:
    ${1}
    if ${0:condition}:
        break
endsnippet

snippet with
with ${1:expr} as ${2:var}:
    ${0}
endsnippet

# New Class
snippet cl
class ${1:ClassName}(${2:object}):
    """${3:docstring for $1}"""
    def __init__(self, ${4:arg}):
        ${5:super($1, self).__init__()}
        self.$4 = $4
        ${0}
endsnippet

# New Function
snippet def
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    """${3:docstring for $1}"""
    ${0}
endsnippet

snippet deff
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    ${0}
endsnippet

# New Method
snippet defs
def ${1:mname}(self, ${2:arg}):
    ${0}
endsnippet

# New Property
snippet property
def ${1:foo}():
    doc = "${2:The $1 property.}"
    def fget(self):
        ${3:return self._$1}
    def fset(self, value):
        ${4:self._$1 = value}
    def fdel(self):
        ${0:del self._$1}
    return locals()
$1 = property(**$1())
# Ifs
endsnippet

snippet if
if ${1:condition}:
    ${0}
endsnippet

snippet el
else:
    ${0}
endsnippet

snippet ei
elif ${1:condition}:
    ${0}
endsnippet

# For
snippet for
for ${1:item} in ${2:items}:
    ${0}
endsnippet


# Encodes
snippet cutf8
# -*- coding: utf-8 -*-
endsnippet

snippet clatin1
# -*- coding: latin-1 -*-
endsnippet

snippet cascii
# -*- coding: ascii -*-
endsnippet

# Lambda
snippet ld
${1:var} = lambda ${2:vars} : ${0:action}
endsnippet

snippet .
self.
endsnippet

snippet try Try/Except
try:
    ${1}
except ${2:Exception}, ${3:e}:
    ${0:raise $3}
endsnippet

#  snippet try Try/Except/Else
#  try:
#          ${1}
#      except ${2:Exception}, ${3:e}:
#          ${4:raise $3}
#      else:
#          ${0}
#  endsnippet

#snippet try Try/Except/Finally
#    try:
#        ${1}
#    except ${2:Exception}, ${3:e}:
#        ${4:raise $3}
#    finally:
#        ${0}
#endsnippet

#snippet try Try/Except/Else/Finally
#    try:
#        ${1}
#    except ${2:Exception}, ${3:e}:
#        ${4:raise $3}
#    else:
#        ${5}
#    finally:
#        ${0}
#endsnippet

# if __name__ == '__main__':
snippet ifmain "if name main test" w
if __name__ == '__main__':
    ${0:main()}
endsnippet

# __magic__
snippet _
__${1:init}__
endsnippet

# python debugger (pdb)
snippet pdb
import pdb; pdb.set_trace()
endsnippet

# ipython debugger (ipdb)
snippet ipdb
import ipdb; ipdb.set_trace()
endsnippet

# ipython debugger (pdbbb)
snippet pdbbb
import pdbpp; pdbpp.set_trace()
endsnippet

# python console debugger (pudb)
snippet pudb
import pudb; pudb.set_trace()
endsnippet

snippet pprint
import pprint; pprint.pprint(${1})
endsnippet

snippet "
"""
${0:doc}
"""
endsnippet

# assertions
snippet a=
self.assertEqual(${0}, ${1})
endsnippet

# test function/method
snippet test
def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
    ${0}
endsnippet

# test case
snippet testcase
class ${1:ExampleCase}(unittest.TestCase):
    def test_${2:description}(self):
        ${0}
endsnippet

snippet fut
from __future__ import ${0}
endsnippet

#getopt
snippet getopt
try:
    # Short option syntax: "hv:"
    # Long option syntax: "help" or "verbose="
    opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

    except getopt.GetoptError, err:
        # Print debug info
        print str(err)
        ${3:error_action}

    for option, argument in opts:
        if option in ("-h", "--help"):
            ${0}
        elif option in ("-v", "--verbose"):
            verbose = argument
endsnippet

# logging
# glog = get log
snippet glog
import logging
logger = logging.getLogger(${0:__name__})
endsnippet

snippet le
logger.error(${0:msg})
endsnippet

# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
logger.debug(${0:msg})
endsnippet

snippet lw
logger.warning(${0:msg})
endsnippet

snippet lc
logger.critical(${0:msg})
endsnippet

snippet li
logger.info(${0:msg})
endsnippet

snippet epydoc
    """
    ${1:Description}

    @param ${2:param}: ${3: Description}
    @type  $2: ${4: Type}

    @return: ${5: Description}
    @rtype : ${6: Type}

    @raise e: ${0: Description}
    """
endsnippet

snippet dol
def ${1:__init__}(self, *args, **kwargs):
    super(${0:ClassName}, self).$1(*args, **kwargs)
endsnippet

snippet kwg
self.${1:var_name} = kwargs.get('$1', ${2:None})
endsnippet

snippet lkwg
${1:var_name} = kwargs.get('$1', ${2:None})
endsnippet

snippet args
*args${1:,}${0}
endsnippet

snippet kwargs
**kwargs${1:,}${0}
endsnippet

snippet akw
*args, **kwargs${1:,}${0}
endsnippet

snippet modeline "python modeline" w
# vim: ai ts=4 sts=4 et sw=4
endsnippet

snippet f "f-string" w
f'${1:content}'
endsnippet

snippet 'fp|pf' "print f-string" r
print(f'${1:content}')
endsnippet

snippet fv "stores f-tring in a variable" w
${1:var_name} = f'${2:content}'
endsnippet

snippet 'doc(string)?' "add docstring" r
'''
${1:${VISUAL:type here}} ${0}
'''
endsnippet

snippet open "open file" w
with open('${1:file}', '${2:r}') as f:
    f = f.read()
endsnippet

snippet gnu "gnu licence" w
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

${0}
endsnippet
